
// 布尔操作符
	// 逻辑非 !	  --- 其实就是真变假,假变真
	// 逻辑或 ||
		// a || b
		// 1. 如果第一个数为真则不会继续执行,与C语言逻辑或几乎相同
	// 逻辑与 &&
		// a && b
		// 1. 如果第一个数为假则不会继续执行,与C语言逻辑与几乎相同

// 乘/除性操作符( 其实就是" *,/ "数学的乘号 )
	// 1. 正常数值计算相乘/除
	// 2. 如果一个操作数是非数值,则在后台调用Number()函数转换为数值后在进行计算
	// 3. 关于Infinity细节看原书p66

// 模( % )
	// 1. 左边值 < 右边值 返回 左边值 
	alert( 5%23 ); // 5
	// 2. 其实求的是余数( 与C语言的%相同 i)
	alert( 23%5 ); // 3
	// 3. 遇到非数值先使用Number()转换为数值,在进行计算
	// 4. 关于Infinity细节看原书p67

// 加性操作符
	// 1. 如果二边都是字符串,则进行字符串拼接
	// 2. 如果一边字符串,一边数值,则先将数值-转换-字符串,在进行字符串拼接
	// 3. 如果操作的是对象,或者布尔类型等非数值,则后台会进行toString()/String()转换为字符串在进行字符串拼接
	// 如:
	var a = 1,b = 'b',c='c',d=true,e = '2';
	alert(b+c); // "bc": 字符串拼接
	alert(a+b); // "1b": 先将数值转换为字符串在进行字符串拼接
	alert(d+b); // "trueb": 非数值类型先进行转换,在进行字符串拼接
	alert(typeof a+e);
// 减性操作符
	// 1. 
	var a = 'a',b='2',c='1',d=5;
	alert(a-b); // NaN: 非数值
	alert(c-b); // -1: 字符串转数值进行计算
	alert(d-b); // 3: 字符串转数值进行计算
	
