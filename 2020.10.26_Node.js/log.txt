Udemy课程：Jonas Schmedtmann - https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/learn/lecture/15080910#overview
    # 1 ~ # 4: 介绍Node.js
    # 5( 完成笔记 )
        a) 00:00 - 为什么要使用Node.js?
        b) 3:49 - I/O model是什么? ( 等待研究 )
        c) 4:57 - Node.js实话项目，以及不适合项目
            0. 适合: 构建，视频网站，聊天工具, API交互web程序
            1. 不适合: 图像处理, 视频转换, 文件压缩
                a) 原因: 因为node.js社区没有相关开发
                b) 推荐: Python3
    # 6( 完成笔记 )
        a) 00:00 - Node.js小试牛刀 
        b) 2:29 - " node "命令, 可以进入node.js命令行模式, 书写一些js语法
            0. 退出命令: " .exit " | Ctrl+D
        c) 4:10 - node命令行模式下，"TAB"按键，显示全局可用变量
        d) 5:25 - 下划线的使用，下划线代表上一个返回的数据，如: 3*8 --> 24 --> _+6 --> 30
        e) 5:50 - 查看变量下的内容: 如 String，则在node命令行下输入: " String. " + 按2下TAB键 
        f) 6:09 - 清除屏幕: MAC --> commd + k; Window --> console.clear()
    # 7( 完成笔记 )
        a) 00:00 - 核心模块
        b) 1:35 - 命令：node xxx.js 运行js文件
        c) 3:40 - node.js下索引第三方库的写法
            0. fs库: 文件读写函数库
        d) 5:20 - 学会查看阅读node.js官方文档: https://nodejs.org/docs/latest-v11.x/api/index.html
    # 8( 完成笔记 )
        a) 00:00 - fs库的使用
        b) 3:15 - fs库读取文件
        c) 6:48 - fs库写入文件
            0. Date.now(): 当前时间戳( 毫秒为单位 )
    # 9( 完成笔记 )
        a) 00:00 - 4个重要的概念
            0. 同步( 阻塞代码 )
            1. 异步( 非阻塞代码 )
            2. 阻塞: 影响性能
            3. 非阻塞: 性能良好，需要callBack写法
        b) 1:58 - 同步，异步代码，对比
        c) 7:04 - I/O代表: 输入/输出
            0. node.js就是围绕着callBack来处理请求
        d) 8:04 - 注意: callBack写法 !== 一定是异步
        e) 9:19 - 回调地狱callBack Hell: 错误写法示例
    # 10( 完成笔记 )
        a) 00:00 - 异步读写文件
        b) 10:32 - 用回调地狱的形式，读写文件( 只是示例, 实际开发不可用 )
    # 11( 完成笔记 )
        a) 00:00 - 建立一个简单的server
        b) 7:21 - 完整的server代码
        c) 8:09 - 访问server
        d) 9:49 - Ctrl+C退出程序，注意：在修改完新的代码后，要重启服务
    # 12( 完成笔记 )
        a) 00:00 - 路由
        b) 2:08 - 通常路由是借助express库的，但是这里是小项目，用原生构建路由即可
        c) 8:19 - res.url反馈的是当前请求的路由路径，我们可以根据这个来做一些，简单的路由操作。同时为做更复杂的路由时，暂且引用"url库"
        d) 12:21 - res.writeHead改写包头使用示范
            0. 包的状态码: 如404，200, 等....
            1. "Content-type"熟悉: 可以声明返回数据类型, "text/html" 返回html数据
            2. "my-xxx": "也可以自定义添加一些内容"
    # 13( 完成笔记 )
        a) 00:00 - 构建一个简单的API
        b) 5:35 - "__dirname"代表当前目录，通常在node.js下使用配置文件路径( 索引库的路径时除外 )
        c) 9:51 - 发送json数据
        d) 13:41 - 改进API，让数据只读取一次，api接口直接反馈数据。( 利用JS代码的作用域，解决 )。


