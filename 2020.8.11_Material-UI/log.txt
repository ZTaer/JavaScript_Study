Material-UI官方文档:
    2020.9.21 - ( 等待笔记 ): 
        0. Checkbox配合FormGroup
        1. FormControl以及FormLabel简单的介绍
        2. 利用解构，查看ReactDom标签属性方法
        3. Switch组件: 开关组件
        4. 有label名称的Switch组件

YouTube资源: https://www.youtube.com/watch?v=pHclLuRolzE&list=PLQg6GaokU5CwiVmsZ0d_9Zsg_DnIP_xwr&index=1
    #1( 完成笔记 )
        a) 7:13 - Material-UI的属性库:
            0. palette: 颜色属性主题
            1. typography:  字体属性主题
        b) 8:52 - CreateMuiTheme组件: 构建自定义组题组件，根据"Material-ui属性库"修改成自己的主题
        c) 9:02 - ThemeProvider组件: 使用自定义主题组件
        d) 12:54 - Typography组件: 主题组件库的使用
        e) 14:20 - makeStyles/useStyles函数: 构建css属性, 作用与组件 
    #2( 完成笔记 )
        a) 2:14 - 文档搜索"App Bar"至导航栏文档
        b) 5:39 - Material-UI安装库
            0. 核心: yarn add @material-ui/core
            1. 图标: yarn add @material-ui/icon
            2. 样式: yarn add @material-ui/styles
            3. 注意事项: 要删除React默认的'严格模式'因为严格模式下Material-ui并不完全兼容
        c) 14:10 - Grid组件: 响应式布局，xs < sm < md < lg < xl
            0. xs: 最小
            1. xl: 最大
            2. 其余属性屏幕分辨率监听，与Bootstarp4差不多
        d) 16:07 - AppBar组件: 导航栏，positon决定导航栏的占位
        e) 20:08 - flex:1; 待实验
            0. flex:1; - 占用空间平均分布
            1. flex:1; - 占用空间100%，如果遇到其它原生则自适应    
        f) 24:50 - Card组件套装: 构建布局使用
            0. spacing: 操控间隔
        g) 28:47 - IconButton组件: 作用使icon可单击, 没有他icon只是图标 
    #3( 完成笔记 )
        a) 8:51 - makeStyles动态css的使用
        b) 11:38 - [theme.breakpoints.up("sm")]的用法，根据屏幕宽度做出动态css
        c) 14:07 - makeStyles: classNames写入多个classes的方法到React默认的className
    #4( 完成笔记 )
        a) 5:10 - Button组件: componet={Link}属性 可以与 react-router-dom 的Link联用, 并to属性可直接作用在Button上
        b) 10:46 - ButtonGroup组件：以及注意区分"Tabs组件"
            0. Popper组件( 等待研究 )
    #5( 完成笔记 )
        a) 1:35 - Typography组件: aligin属性，
        b) 3:58 - Typography组件: noWrap属性，文本不换行
        c) 4:38 - Typography组件: variant属性，文本样式, 具体请看官方文档
        d) 6:26 - Typography组件: variantMapping属性，即可以切换文本样式，也可以切换组件标签类型
    #6( 完成笔记 )
        a) 3:22 - theme主题: breakpoints属性: 配置xs,sm,md,lg,xl等...
        b) 5:05 - theme主题: 
            0. palette属性: 配置颜色等...
            1. typography属性: 配置字体样式，如字体类型，字体标签样式等..
        c) 13：59 - breakpoints属性: 配合up等函数，在指定sm..等其它宽度下做出不同的css样式
        d) 15:20 - useTheme可以在组件中快速访问theme属性
        e) 16:39 - palette属性: { type: "dark" }可以设定为黑暗模式
    #7( 完成笔记 )
        a) 0:56 - Paper组件: 当为dark模式时，Paper将变为深色
        b) 2:23 - Paper组件: elevation属性, 属性值越大，阴影越高越重
        c) 3:32 - Paper组件: square属性，默认为false，Paper边框为圆角，为true时则为，边框为方角
    #8( 完成笔记 )
        a) 2:33 - 配置Dark主题，Paper组件会跟随，模式转换而改变颜色主题, 并非常聪明的检测字体颜色，转变为适合显示的颜色 
        b) 1:43 - 配合Switch切换按钮，动态的配置，dark与light模式
        c) 8:01 - 多种主题配置写法
    #9( 等待研究 )
        a) 00:00 - 总体介绍了，可以仿制一部分官方推荐的页面，不过收费模板页面才能更加体现技术
    #10( 完成笔记 )
        a) 9:02 - Grid组件 - container下配合spacing属性可以达到控制item间隙的效果
        b) 15:48 - Grid组件 - direction属性：可切换排序方向就是flex的那个属性；Divider组件 - 分割线组件
    #11( 完成笔记 ) 
        a) 1:16 - flexBox学习站点: http://flexboxfroggy.com/
        b) 6:17 - Grid组件 - flex用法演示，在官方文档中
    #12( 完成笔记 )
        a) 4:55 - CardHeader组件：avatar放置头像组件
        b) 6:19 - CardHeader组件API
        c) 9:56 - Collapse组件：折叠内容组件，通过属性in的Boolean来是否展开折叠
        d) 10:48 - CardActionArea组件：可以让其中的子标签，有“涟漪”的动画效果
    #13( 完成笔记 - 完成研究 )
        a) 2:45 - Table组件( 非常重要 - 核心 )
        b) 3:44 - createData函数：构造表哥数据格式
        c) 4:34 - TableContainer组件: 使用componet属性转换为Paper组件，以此保证，table组件可适用于各种组题
        d) 10:36 - Table组件非常重要，官方示例都模仿一遍
        e) 补充研究( 等待研究 ):
            0. Table套装,细节研究补充
            1. Tooltips组件
            2. Checkbox组件
            3. TableSortLabel组件
    #14( 等待研究 )
        a) 8:46 - Router history配置( 有疑惑 )
        b) 
    #15( 等待笔记 )
        a) 3:17 - 搜索组件在Aoobar中，个人构建时可以用搜索导航栏代替更好
        b) 10:17 - 基本布局，这个布局可以不按照视频来搞，自由发挥
    #16( 等待笔记 )
        a) 3:04 - CircularProgress组件: 加载器组件
        b) 产品API官方文档: https://pokeapi.co/
            0. 图片: https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png
        c) 12:18 - 单个产品路由
        d) 18:26 - 单个产品页面渲染，以及mock图片链接获取方式
        e) 18:51 - 注意: react组件的return( <> xxx </> )骗取react为单个容器方法( 等待笔记 )
    #17( 等待笔记 )
        a) 6:54 - axios请求加工产品数据 
        b) 9:44 - 加载产品的3种状态
            0. 数据正在加载 --> 渲染加载器
            1. 数据请求成功 --> 渲染产品
            2. 数据请求不存在或者失败 --> 渲染报错信息
        c) 11:23 - 3种状态渲染逻辑实现( 有点6 - 需研究 )
        d) 12:52 - 单个产品请求数据
    #18( 等待笔记 )
        a) 5:07 - 当进行有主题更换的web程序时，尽量从mui调色板中获取颜色，方便变化, fade函数( 等待实验 )
        b) 5:59 - 主要调整书写，搜索栏的样式
        c) 7:24 - combo box 搜索组件，有配合预加载数据进行自动搜索功能
        d) 7:50 - algolia搜索API( 第三方辅助搜索引擎 )
        e) 11:04 - &&渲染方法( 等待研究 )，当前用于渲染过滤器内容。
        f) 非常重要: &&渲染方法( 等待研究 ), 以及后端获取数据渲染的3种状态渲染。
    #19( 等待笔记 )
        a)  00:00 - Tabs组件的使用
        b)  5:41 - 经过在次验证, aria-label属性确实为，备注功能
        c)  6:22 - Tabs组件
        d) 14:58 - Tabs组件基础写法
        e) 15:30 - CssBaseLine组件，可以填充导航栏的高度，以此在不受导航栏影响的情况下，完整渲染页面
        f) 21:31 - Tabs与路由结合
        g) 22:40 - Tabs成功与路由结合
    #20( 完成笔记 - 完成研究 )
        a) 11:08 - Table分页组件: 分页公式切片算法
        b) 12:45 - Table分页填充: 渲染空余高度，填充table
        c) 13:40 - Table分页填充: 公式算法
        d) 经验教训：看似复杂复杂的代码, 其实拆分出后, 围绕的原理并不复杂
        e) Table实战项目( 视频教程在各分支中 ):  https://github.com/ZTaer/basic-react-form/tree/master
        f) Table组件多选( 完成研究 )
    #21( 等待笔记 )
        a) 00:00 - Drawer抽屉组件( 非常重要 - 核心 )
        b) 3:50 - Drawer有3种类型
            0. 临时Drawer: 弹出的Drawer将为专注模式，背景会变暗，只能对Drawer进行操作
            1. 持久Drawer: 通过按钮或者其他交互模式召唤出Drawer进行操作
            2. 永久Drawer: 一直显示着Drawer
        c) 4:50 - Drawer组件属性:
            0. variant属性：操控Drawer类型
            1. anchor属性: 操控Drawer弹出的位置
        d) 7:18 - ListItem组件应用于Drawer组件中
        e) 10:00 - Drawer API: 
            0. onClose函数操控组件关闭
        f) 14:43 - 构建的Drawer组件配置位置
        g) 17:32 - 给Drawer设定固定宽度
        h) 22:02 - 重新构建数据结构来渲染，Drawer中的选项, 含Icon和text
        i) 25:44 - 给Drawer选项配置路由
    #22( 等待笔记 )
        a) 00:00 - Breadcrumbs组件: 面包屑导航
        b) 3:39 - event.preventDefault()终止默认事件，执行React设定的事件
        c) 4:22 - Breadcrumbs组件: 
            0. separator属性: separator=">"属性设定Link之间隔离符类型,可以是字符串，也可以是Icon
        d) 6:22 - Breadcrumbs与路由结合，官方例子并不是最好的列子, 不过视频中的A老师会提供更好的例子
        e) 21:17 - Breadcrumbs组件配合路由，构建拆分链接逻辑，并渲染到Breadcrumbs中
            0. 例如当前链接为: /join/designer
            1. 拆分链接后渲染组件跳转的链接为: ( "/" > "/join" > "/join/designer" )
            2. 以上放逻辑循环类推
        f) 23:37 - 通过"索引值"来判断渲染"当前链接"样式, 当前链接是尾部
    #23( 等待笔记 )
        a) 00:00 - Hidden组件
        b) 2:57 - 其实这个组件，个人感脚，研究官方API即可
        c) 3:48 - 各种xs,sm,md,lg,xl窗口大小标准
    #24( 等待笔记 )
        a) 00:00 - Snackbars组件，小提示框( 非常重要 - 核心 )
        b) 3:55 - 3个重要的属性
            0. open属性: true时显示，提示框
            1. autoHideDuration属性: 提示框关闭时间设定
            2. onClose属性: 要放置关闭提示框的操控逻辑，就是操控open变量属性的逻辑
        c) 6:01 - Alert组件配合Snackbars组件，可以显示出不同种类的弹窗，如'错误'，'警报', '成功' 等...Snackbars组件默认为白色背景
        d) 19:36 - 将Snackbars+Alert组件+Redux: 配合形成了一个小实例，不过这里使用了react-redux的useDispatch来执行action 
        e) 20:05 - 配置Snackbars组件：配置Snackbars组件到App.js方便在程序的全局显示
    #25( 等待笔记 )
        a) 00:00 - Accordion组件: 手风琴组件，比较实用的组件
        b) 4:15 - Accordion组件搭配辅助的组件
        c) 6:00 - Accordion的TransitionProps属性对手风琴组件的优化，性能好，seo优化好
        d) 9:02 - 辅助组件:
            0. AccordionSummary组件：存放手风琴标题/Icon
            1. AccordionDetails组件: 存放手风琴被折叠的内容细节
        e) 11:27 - flexBasis属性，来跳转手风琴标题中，备注的间距，算是一个小细节吧 
        f) 14:44 - 手风琴单独展开显示效果：Accordion组件中的expanded, onChange属性逻辑决定，需要解析实验
        g) 19:41 - A老师，通过数据结构来，迭代，手风琴组件，这样确实更加容易解析，手风琴结构
            0. 注意: map迭代时，不要忘记key
    #31( 完成笔记 )
        a) 1:24 - vscoode辅助工具代码片段
        b) 4:31 - 构建快捷代码片段, ctrl+shift+p --> 输入snippet
        c) 5:44 - json构建代码片段
        d) 7:07 - vscode插件: reactjs code snippets, Material-UI snippets
        e) 9:00 - muiButton代码片段快捷实列
        f) 12:16 - muiXXX代码片段，会根据不同的import方式来导入
        g) 常用代码片段快捷键:
            0. 代码块:
                a) rafce --> 快捷创建 - react基本解构
                b) rce --> 快捷创建 - react, class基本解构
                c) rcredux --> 快捷创建 - class的react+redux基本结构
                d) rfcredux --> 快捷创建 - 函数的react+redux基本结构
                e) reduxmap --> 快捷创建 - redux的mapStateToProps以及mapDispatchToProps
                g) rxaction --> 快捷创建 - redux的action
                h) rxreducer --> 快捷创建 - redux的reducer
            1. 代码片段:
                a) clg --> 快捷输入 - console.log(object);
                a) clo --> 快捷输入 - console.log('object :>> ', object);
                a) cer --> 快捷输入 - console.error(object); 
                a) cin --> 快捷输入 - console.info(object);
                a) cwa --> 快捷输入 - console.warn(object);

                b) imp --> 快捷输入 - import moduleName from 'module';
                b) imn --> 快捷输入 - import "xxx"
                b) imd --> 快捷输入 - import {  } from 'module'
                
                c) exp --> 快捷输入 - export default xxx
                c) enf --> 快捷输入 - export函数

                d) nfn --> 快捷输入 - 构造const箭头函数
                d) anfn --> 快捷输入 - 构造非const箭头函数

                e) fof --> 快捷输入 - 构造for of
                e) fin --> 快捷输入 - 构造for in

                f) dob --> 快捷输入 - 对象解构const {propertyName} = objectToDestruct
                f) dar --> 快捷输入 - 数组解构const {propertyName} = objectToDestruct

                g) imrs --> 快捷输入 - 快捷导入react hook, import React, { useState } from 'react'
                g) imrse --> 快捷输入 - 快捷导入react hook, import React, { useState } from 'react'

                h) redux --> 快捷输入 - import { connect } from 'react-redux'

                i) cdm --> 快捷输入 - react生命周期componentDidMount
                i) cwn --> 快捷输入 - react生命周期componentWillUnmount
        f) VSCODE - 快捷键:
            0. 切换到文件资源管理器: Ctrl + Shift + E 
                a) 重命名: F2
                b) 复制/粘贴: Ctrl+C / Ctrl+V
                c) 删除: delete
                d) 折叠隐藏/展开: 箭头左键/箭头右键
            1. 打开文件所在位置: Alt+Shift+R
            2. 新终端: Ctrl+Shift+`
                a) 拆分终端: Ctrl+Shift+5
                b) 隐藏/显示终端: Ctrl+`
            3. 打开新的vscode: Ctrl+Shift+N
            4. 切换注释: Ctrl+/
            5. 切换折叠: Ctrl+K+L
            6. 拆分文件编辑器: Ctrl+\
                a) vim下可以使用: Ctrl+w来切换不同文件编辑器窗口
                b) vim下可以使用: :q 来退出打开的文件
