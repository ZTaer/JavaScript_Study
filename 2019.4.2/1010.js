// 32位存储-转-二进制码
	// 默认32位,有一位表示正/负
	// 0表示正数,1表示负数,所以32位真正存储数字的有31位
var num = -18;
alert( num.toString(2) ); // 更加人性化的转换显示

var num1 = 25;
alert(~num1); // -26

// 按位对比变换
//	总体围绕32位二进制数进行推演
	// 1. 按位非(NOT)
		// 1变0,0变1
		// 如:
		var num2 = 25; // 二进制: 00000000 00000000 0000000 00011001
		var num3 = ~num2 // -26: 二进制: 11111111 11111111 11111111 1100110
		alert(num3);
	// 2. 按位与(AND)
		// 变换规则:
		//	1 : 1 = 1
		//	1 : 0 = 0
		//	0 : 0 = 0
		// 如:
		var num4 = 25 & 3;
		alert(num4);
			// 25: 00000000 00000000 00000000 00011001
			// 3:  00000000 00000000 00000000 00000011
			// 对比后: 1: 00000000 00000000 00000000 00000001
	// 3. 按位或(OR)
		// 变换规则:
		//	1 : 1 = 1
		//	0 : 1 = 1
		//	0 : 0 = 0
		// 与上对比变换类似
		var num5 = 25 | 3;
		alert(num5);
	
	//2019.4.3
	// 4. 按位异或(XOR)
		// 变换规则:
		// 1 : 1 = 0
		// 0 : 1 = 1
		// 0 : 0 = 0
		// 规则,二位比较中只有一个1时才返回1
		var num6 = 25 ^ 3;
		alert(num6);
	
